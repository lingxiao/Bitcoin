ls
eth.accounts
eth.accoutns
eth.accounts
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
eth.accounts
eth.accounts[0]
miner.start(1)
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
miner.stop()
miner.setEtherbase(eth.accounts[0])
miner.start(1)
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
eth.fromWei(eth.getBalance(eth.accounts[1]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
miner.stop()
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
web3.fromWei(eth.getBalance(eth.accounts[0]))
miner.start(1)
web3.fromWei(eth.getBalance(eth.accounts[0]))
web3.fromWei(eth.getBalance(eth.accounts[1]))
web3.fromWei(eth.getBalance(eth.accounts[0]))
miner.stop()
miner.start(1)
web3.fromWei(eth.getBalance(eth.accounts[0]))
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[0]))
web3.fromWei(eth.getBalance(eth.accounts[1]))
web3.fromWei(eth.getBalance(eth.accounts[0]))
web3.fromWei(eth.getBalance(eth.accounts[1]))
web3.fromWei(eth.getBalance(eth.accounts[0]))
miner.start(1)
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[0]))
web3.fromWei(eth.getBalance(eth.accounts[1]))
eth.accounts
eth.getBalance(eth.accounts[0])
miner.start()
miner.start(1)
miner.stop()
miner.stop(1)
miner.start(1)
miner.stop(1)
miner.stop()
ls
eth.accounts
eth.getBalance(eth.accounts[0])
eth.accouns
eth.accounts
eth.getBalance(eth.accounts[0])
geth --identity "node" --nodiscover --maxpeers 0 --datadir /Users/lingxiao/Documents/Projects/Bitcoin/src/ether-2/data --networkid 123 --ws --wsport 8545 --wsaddr 0.0.0.0 --wsorigins "*" console
eth.accounts
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
eth.getBalance(eth.accounts[0])
miner.stop()
eth.getBalance(eth.accounts[0])
miner.start(1)
eth.getBalance(eth.accounts[0])
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[0])
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.sTOP()
miner.stop()
miner.sTOP()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
t
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
eth.accounts
usr0 = eth.accounts[0]
eth.getBalance(usr0)
eth.sendTransaction(eth.accounts[1], 1000, {from: eth.accounts[1]})
eth.sendTransaction(eth.accounts[1], 1000, {from: eth.accounts[0]})
eth.accounts[0]
eth.accounts[1]
eth.getBalance(eth.accounts[1])
eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: 1000})
eth.sendTransaction(eth.accounts[1], 1000, {from: eth.accounts[0]})
eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: 1000})
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: 10000000})
eth.getBalance(eth.accounts[1])
eth.getBalance(eth.accounts[0])
var sender = eth.accounts[0
var sender = eth.accounts[0];
var receiver = eth.accounts[1];
var amt = web3.toWei(0.01, "ether")
amt
eth.sendTransaction({from: sender, to: receiver, value: amt})
eth.accounts[0]
eth.getBalance(sender)
eth.getBalance(receiver)
eth.sendTransaction({from: sender, to: receiver, value: amt})
eth.getBalance(sender)
eth.getBalance(receiver)
var amt = web3.toWei(0.7, "ether")
amt
eth.sendTransaction({from: sender, to: receiver, value: amt})
eth.getBalance(sender)
eth.getBalance(receiver)
receiver
sender
miner.start(1)
sender
receiver
eth.sendTransaction({from:sender, to: receiver, value: 10000})
miner.stop()
eth.sendTransaction({from:sender, to: receiver, value: 10000})
miner.start(1)
eth.getBalance(receiver)
eth.getBalance(sender)
eth.getBalance(receiver)
miner.stop()
miner.start(1)
miner.stop()
eth.accounts
eth.accounts[0]
eth.getBalance(eth.accounts[0])
eth.version
eth.personal
eth.getBalance(eth.accounts[0])
eth.personal
ls
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
eth.getBalance(eth.accounts[0])
sender
sender = eth.accounts[0]
receiver = eth.accounts[1]
eth.getAccounts
eth.getAccounts(console.log)
geth.accounts
eth.accounts
eth.getBalance(eth.accounts[0])
miner.start(1)
eth.getBalance(eth.accounts[0])
miner.stop()
miner.start()
miner.start(1)
eth.getBalance(eth.accounts[1])
miner.stop()
miner.start(1)
eth.getBalance(eth.accounts[1])
miner.stop()
eth.accounts
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()